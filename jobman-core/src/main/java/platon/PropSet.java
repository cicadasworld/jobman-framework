// Java file generated automatically from `propset.fzdl'.
// $Timestamp: 2016-06-20 21:49:14
// DO NOT EDIT THIS FILE UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING.
//
package platon;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

@SuppressWarnings("serial")
public class PropSet extends HashMap<String, String> implements Freezable, FreezerJSON
{
    public PropSet() {
        // EMPTY
    }

    public PropSet(Map<String, String> map) {
        super(map);
    }

    public PropSet(int initialCapacity) {
        super(initialCapacity);
    }

    public PropSet(int initialCapacity, float loadFactor) {
        super(initialCapacity, loadFactor);
    }

    // 从给定对象拷贝数据到当前对象
    @Override
    public void copyFrom(Freezable other) {
        PropSet from = (PropSet)other;
        this.clear();
        Iterator<Map.Entry<String, String>> it = from.entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry<String, String> pair = it.next();
            String key = deepCopyKey(pair.getKey());
            String val = deepCopyValue(pair.getValue());
            this.put(key, val);
        }
    }

    // 克隆当前对象。
    @Override
    public Freezable makeClone() {
        PropSet obj = new PropSet();
        obj.copyFrom(this);
        return obj;
    }

    // 将当前对象打包进给定的字节流中。
    @Override
    public void freeze(ByteStream output) throws FreezeException {
        int[] cookie = new int[2];
        Message.beginFreeze(output, cookie);

        final int sz = this.size();
        output.writeSize(sz);

        Iterator<Map.Entry<String, String>> it = this.entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry<String, String> pair = it.next();
            String key = pair.getKey();
            String value = pair.getValue();
            freezeKey(key, output);
            freezeValue(value, output);
        }

        Message.endFreeze(output, cookie);
    }

    // 从给定字节流中解包, 并将解包得到的数据覆盖到当前对象上。
    @Override
    public void defreeze(ByteStream input) throws DefreezeException {
        this.clear();
        Message.beginDefreeze(input);

        int sz = input.readSize();
        assert(sz >= 0);
        for (int i = 0; i < sz; i++) {
            String key = defreezeKey(input);
            String value = defreezeValue(input);
            this.put(key, value);
        }

        Message.endDefreeze(input);
    }

    static private String deepCopyKey(String srcKey) {
        return srcKey;
    }

    static private String deepCopyValue(String srcValue) {
        return srcValue;
    }

    static private void freezeKey(String key, ByteStream output) throws FreezeException {
        output.writeString(key);
    }

    static private void freezeValue(String value, ByteStream output) throws FreezeException {
        output.writeString(value);
    }

    static private String defreezeKey(ByteStream input) throws DefreezeException {
        return input.readString();
    }

    static private String defreezeValue(ByteStream input) throws DefreezeException {
        return input.readString();
    }

    // 将当前消息打包成JSON树, 返回JSON树的指针
    @Override
    public JsonNode freezeToJSON() throws FreezeException {
        JsonNode thisNode = JsonNode.createJsonObject();

        Iterator<Map.Entry<String, String>> it = this.entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry<String, String> pair = it.next();
            String key = pair.getKey();
            String value = pair.getValue();
            JsonNode j = freezeValueToJSON(value);
            thisNode.put(key + "", j);
        }

        return thisNode;
    }

    // 从给定JSON树中解包, 并将解包得到的数据覆盖到当前消息上。
    @Override
    public void defreezeFromJSON(JsonNode inputJsonNode) throws DefreezeException {
        if (!inputJsonNode.isObject()) {
            throw new DefreezeException("input json is not object");
        }
        clear();
        for (String key : inputJsonNode.getNames()) {
            JsonNode j = inputJsonNode.get(key);
            String k = defreezeKeyFromString(key);
            String v = defreezeValueFromJSON(j);
            this.put(k, v);
        }
    }

    static private JsonNode freezeValueToJSON(String value) throws FreezeException {
        return new JsonNode(value);
    }

    static private String defreezeKeyFromString(String str) {
        return str;
    }

    static private String defreezeValueFromJSON(JsonNode inputNode) throws DefreezeException {
        return inputNode.asString();
    }
}

