// Java file generated automatically from `byteseq.fzdl'.
// $Timestamp: 2017-12-06 18:51:03
// DO NOT EDIT THIS FILE UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING.
//
package platon;

import java.nio.ByteBuffer;

public class ByteSeq implements Freezable, FreezerJSON
{
    private ByteBuffer buffer = null;

    public ByteSeq() {
        // EMPTY
    }

    public ByteSeq(byte[] array) {
        this.buffer = ByteBuffer.wrap(array);
    }

    public ByteSeq(byte[] array, int offset, int length) {
        this.buffer = ByteBuffer.wrap(array, offset, length);
    }

    public ByteBuffer getBuffer() {
        return this.buffer;
    }

    public void setBuffer(ByteBuffer buffer) {
        this.buffer = buffer;
    }

    // 从给定对象拷贝数据到当前对象
    @Override
    public void copyFrom(Freezable other) {
        ByteSeq from = (ByteSeq)other;
        if (from.buffer == null) {
            return;
        }
        final int offset = from.buffer.position();
        final int nlen = from.buffer.limit() - offset;
        if (nlen > 0) {
            byte[] v = new byte[nlen];
            from.buffer.get(v);
            this.buffer = ByteBuffer.wrap(v);
        }
    }

    // 克隆当前对象。
    @Override
    public Freezable makeClone() {
        ByteSeq obj = new ByteSeq();
        obj.copyFrom(this);
        return obj;
    }

    public void clear() {
        if (this.buffer != null) {
            this.buffer.clear();
        }
    }

    // 将当前对象打包进给定的字节流中。
    @Override
    public void freeze(ByteStream output) throws FreezeException {
        int[] cookie = new int[2];
        Message.beginFreeze(output, cookie);

        if (this.buffer == null) {
            output.writeSize(0);
        }
        else {
            final int offset = this.buffer.position();
            final int nlen = this.buffer.limit() - offset;

            if (this.buffer.hasArray()) {
                byte[] v = this.buffer.array();
                output.writeBlob(v, offset, nlen);
            }
            else {
                byte[] v = new byte[nlen];
                this.buffer.get(v);
                output.writeBlob(v, 0, nlen);
            }
        }

        Message.endFreeze(output, cookie);
    }

    // 从给定字节流中解包, 并将解包得到的数据覆盖到当前对象上。
    @Override
    public void defreeze(ByteStream input) throws DefreezeException {
        clear();
        Message.beginDefreeze(input);
        byte[] v = input.readBlob();
        Message.endDefreeze(input);
        this.buffer = (v == null) ? null : ByteBuffer.wrap(v);
    }

    // 将当前消息打包成JSON树, 返回JSON树的指针
    @Override
    public JsonNode freezeToJSON() throws FreezeException {
        JsonNode thisNode = JsonNode.createJsonArray();
        if (this.buffer == null) {
            return thisNode;
        }

        int offset = this.buffer.position();
        final int nlen = this.buffer.limit() - offset;
        byte[] elems = null;
        if (this.buffer.hasArray()) {
            elems = this.buffer.array();
        }
        else {
            elems = new byte[nlen];
            this.buffer.get(elems);
            offset = 0;
        }

        JsonNode elemNode = new JsonNode(elems, offset, nlen);
        thisNode.append(elemNode);
        return thisNode;
    }

    // 从给定JSON树中解包, 并将解包得到的数据覆盖到当前消息上。
    @Override
    public void defreezeFromJSON(JsonNode inputJsonNode) throws DefreezeException {
        if (!inputJsonNode.isArray()) {
            throw new DefreezeException("input json is not array");
        }
        clear();
        final int nlen = inputJsonNode.size();
        if (nlen > 0) {
            byte[] v = inputJsonNode.get(0).asBinary();
            this.buffer = (v == null) ? null : ByteBuffer.wrap(v);
        }
    }
}

