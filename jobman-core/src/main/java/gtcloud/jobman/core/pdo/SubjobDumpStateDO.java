// Java file generated automatically from `dumpstate.fzdl'.
// $Timestamp: 2019-08-12 11:56:56
// DO NOT EDIT THIS FILE UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING.
//
package gtcloud.jobman.core.pdo;

import platon.ByteStream;
import platon.DefreezeException;
import platon.Freezable;
import platon.FreezerJSON;
import platon.FreezeException;
import platon.JsonNode;
import platon.Message;

public class SubjobDumpStateDO extends Message implements FreezerJSON
{
    public static final int FIELD_ID_SUBJOBCB = 0;
    public static final int FIELD_ID_RETRYTIMES = 1;
    public static final int FIELD_ID_WHENLASTENTERRETRYQUEUE = 2;
    public static final int FIELD_ID_BORNTIME = 3;
    public static final int FIELD_ID_FINISHEDTIME = 4;
    public static final int FIELD_ID_STATE = 5;
    public static final int FIELD_ID_RESTORED = 6;
    public static final int FIELD_ID_TOTALWORKLOAD = 7;
    public static final int FIELD_ID_COMPLETEDWORKLOAD = 8;
    public static final int FIELD_ID_LASTSTATUSCODE = 9;
    public static final int FIELD_ID_LASTSTATUSMESSAGE = 10;
    public static final int FIELD_ID_OPTIONS = 11;

    private SubjobControlBlockDO subjobCB = null;
    private int retryTimes = 0;
    private long whenLastEnterRetryQueue = 0;
    private long bornTime = 0;
    private long finishedTime = 0;
    private String state = null;
    private boolean restored = false;
    private double totalWorkload = 0;
    private double completedWorkload = 0;
    private int lastStatusCode = 0;
    private String lastStatusMessage = null;
    private platon.PropSet options = null;

    public SubjobDumpStateDO() {
        if (this.subjobCB != null) {
            addField(FIELD_ID_SUBJOBCB);
        }
        addField(FIELD_ID_RETRYTIMES);
        addField(FIELD_ID_WHENLASTENTERRETRYQUEUE);
        addField(FIELD_ID_BORNTIME);
        addField(FIELD_ID_FINISHEDTIME);
        addField(FIELD_ID_STATE);
        addField(FIELD_ID_RESTORED);
        addField(FIELD_ID_TOTALWORKLOAD);
        addField(FIELD_ID_COMPLETEDWORKLOAD);
        addField(FIELD_ID_LASTSTATUSCODE);
        addField(FIELD_ID_LASTSTATUSMESSAGE);
        if (this.options != null) {
            addField(FIELD_ID_OPTIONS);
        }
    }

    public SubjobDumpStateDO(SubjobDumpStateDO other) {
        this.copyFrom(other);
    }

    public SubjobControlBlockDO getSubjobCB() {
        if (this.subjobCB == null) {
            this.subjobCB = new SubjobControlBlockDO();
            this.addField(FIELD_ID_SUBJOBCB);
        }
        return this.subjobCB;
    }

    public int getRetryTimes() {
        return this.retryTimes;
    }

    public void setRetryTimes(int val) {
        this.retryTimes = val;
    }

    public long getWhenLastEnterRetryQueue() {
        return this.whenLastEnterRetryQueue;
    }

    public void setWhenLastEnterRetryQueue(long val) {
        this.whenLastEnterRetryQueue = val;
    }

    public long getBornTime() {
        return this.bornTime;
    }

    public void setBornTime(long val) {
        this.bornTime = val;
    }

    public long getFinishedTime() {
        return this.finishedTime;
    }

    public void setFinishedTime(long val) {
        this.finishedTime = val;
    }

    public String getState() {
        return this.state;
    }

    public void setState(String val) {
        this.state = val;
    }

    public boolean getRestored() {
        return this.restored;
    }

    public void setRestored(boolean val) {
        this.restored = val;
    }

    public double getTotalWorkload() {
        return this.totalWorkload;
    }

    public void setTotalWorkload(double val) {
        this.totalWorkload = val;
    }

    public double getCompletedWorkload() {
        return this.completedWorkload;
    }

    public void setCompletedWorkload(double val) {
        this.completedWorkload = val;
    }

    public int getLastStatusCode() {
        return this.lastStatusCode;
    }

    public void setLastStatusCode(int val) {
        this.lastStatusCode = val;
    }

    public String getLastStatusMessage() {
        return this.lastStatusMessage;
    }

    public void setLastStatusMessage(String val) {
        this.lastStatusMessage = val;
    }

    public platon.PropSet getOptions() {
        if (this.options == null) {
            this.options = new platon.PropSet();
            this.addField(FIELD_ID_OPTIONS);
        }
        return this.options;
    }


    // 从给定对象拷贝数据到当前对象
    @Override
    public void copyFrom(Freezable other) {
        super.copyFrom(other);
        SubjobDumpStateDO from = (SubjobDumpStateDO)other;
        if (this.subjobCB == null) {
            this.subjobCB = new SubjobControlBlockDO();
        }
        this.subjobCB.copyFrom(from.getSubjobCB());
        this.retryTimes = from.retryTimes;
        this.whenLastEnterRetryQueue = from.whenLastEnterRetryQueue;
        this.bornTime = from.bornTime;
        this.finishedTime = from.finishedTime;
        this.state = from.state;
        this.restored = from.restored;
        this.totalWorkload = from.totalWorkload;
        this.completedWorkload = from.completedWorkload;
        this.lastStatusCode = from.lastStatusCode;
        this.lastStatusMessage = from.lastStatusMessage;
        if (this.options == null) {
            this.options = new platon.PropSet();
        }
        this.options.copyFrom(from.getOptions());
    }

    // 克隆当前对象。
    @Override
    public Freezable makeClone() {
        SubjobDumpStateDO o = new SubjobDumpStateDO();
        o.copyFrom(this);
        return o;
    }

    public void clear() {
        this.subjobCB = null;
        this.retryTimes = 0;
        this.whenLastEnterRetryQueue = 0;
        this.bornTime = 0;
        this.finishedTime = 0;
        this.state = null;
        this.restored = false;
        this.totalWorkload = 0;
        this.completedWorkload = 0;
        this.lastStatusCode = 0;
        this.lastStatusMessage = null;
        this.options = null;
        this.clearFields();
    }

    // 将当前对象打包进给定的字节流中。
    @Override
    public void freeze(ByteStream output) throws FreezeException {
        int[] cookie = new int[2];
        beginFreeze(output, cookie);

        if (hasField(FIELD_ID_SUBJOBCB)) {
            writeFieldObject(output, FIELD_ID_SUBJOBCB, this.subjobCB);
        }

        if (hasField(FIELD_ID_RETRYTIMES)) {
            writeFieldInt(output, FIELD_ID_RETRYTIMES, this.retryTimes);
        }

        if (hasField(FIELD_ID_WHENLASTENTERRETRYQUEUE)) {
            writeFieldLong(output, FIELD_ID_WHENLASTENTERRETRYQUEUE, this.whenLastEnterRetryQueue);
        }

        if (hasField(FIELD_ID_BORNTIME)) {
            writeFieldLong(output, FIELD_ID_BORNTIME, this.bornTime);
        }

        if (hasField(FIELD_ID_FINISHEDTIME)) {
            writeFieldLong(output, FIELD_ID_FINISHEDTIME, this.finishedTime);
        }

        if (hasField(FIELD_ID_STATE)) {
            writeFieldString(output, FIELD_ID_STATE, this.state);
        }

        if (hasField(FIELD_ID_RESTORED)) {
            writeFieldBool(output, FIELD_ID_RESTORED, this.restored);
        }

        if (hasField(FIELD_ID_TOTALWORKLOAD)) {
            writeFieldDouble(output, FIELD_ID_TOTALWORKLOAD, this.totalWorkload);
        }

        if (hasField(FIELD_ID_COMPLETEDWORKLOAD)) {
            writeFieldDouble(output, FIELD_ID_COMPLETEDWORKLOAD, this.completedWorkload);
        }

        if (hasField(FIELD_ID_LASTSTATUSCODE)) {
            writeFieldInt(output, FIELD_ID_LASTSTATUSCODE, this.lastStatusCode);
        }

        if (hasField(FIELD_ID_LASTSTATUSMESSAGE)) {
            writeFieldString(output, FIELD_ID_LASTSTATUSMESSAGE, this.lastStatusMessage);
        }

        if (hasField(FIELD_ID_OPTIONS)) {
            writeFieldObject(output, FIELD_ID_OPTIONS, this.options);
        }

        endFreeze(output, cookie);
    }

    // 从给定字节流中解包, 并将解包得到的数据覆盖到当前对象上。
    @Override
    public void defreeze(ByteStream input) throws DefreezeException {
        clear();

        int messageLen = beginDefreeze(input);
        int lastPos = input.read_pos();
        while (messageLen > 0) {
            int[] tuple = readTag(input);
            int tagType = tuple[0];
            int fieldId = tuple[1];

            boolean consumed = false;
            switch (fieldId) {
            case FIELD_ID_SUBJOBCB:
                if (tagType == TAG_TYPE_EMBEDDEDMSG) {
                    if (this.subjobCB == null) {
                        this.subjobCB = new SubjobControlBlockDO();
                    }
                    readFieldObject(input, this.subjobCB);
                    addField(FIELD_ID_SUBJOBCB);
                    consumed = true;
                }
                break;

            case FIELD_ID_RETRYTIMES:
                if (tagType == TAG_TYPE_VARINT32) {
                    this.retryTimes = readFieldInt(input);
                    addField(FIELD_ID_RETRYTIMES);
                    consumed = true;
                }
                break;

            case FIELD_ID_WHENLASTENTERRETRYQUEUE:
                if (tagType == TAG_TYPE_FIXED64) {
                    this.whenLastEnterRetryQueue = readFieldLong(input);
                    addField(FIELD_ID_WHENLASTENTERRETRYQUEUE);
                    consumed = true;
                }
                break;

            case FIELD_ID_BORNTIME:
                if (tagType == TAG_TYPE_FIXED64) {
                    this.bornTime = readFieldLong(input);
                    addField(FIELD_ID_BORNTIME);
                    consumed = true;
                }
                break;

            case FIELD_ID_FINISHEDTIME:
                if (tagType == TAG_TYPE_FIXED64) {
                    this.finishedTime = readFieldLong(input);
                    addField(FIELD_ID_FINISHEDTIME);
                    consumed = true;
                }
                break;

            case FIELD_ID_STATE:
                if (tagType == TAG_TYPE_LEN_PREFIXED) {
                    this.state = readFieldString(input);
                    addField(FIELD_ID_STATE);
                    consumed = true;
                }
                break;

            case FIELD_ID_RESTORED:
                if (tagType == TAG_TYPE_VARINT32) {
                    this.restored = readFieldBool(input);
                    addField(FIELD_ID_RESTORED);
                    consumed = true;
                }
                break;

            case FIELD_ID_TOTALWORKLOAD:
                if (tagType == TAG_TYPE_FIXED64) {
                    this.totalWorkload = readFieldDouble(input);
                    addField(FIELD_ID_TOTALWORKLOAD);
                    consumed = true;
                }
                break;

            case FIELD_ID_COMPLETEDWORKLOAD:
                if (tagType == TAG_TYPE_FIXED64) {
                    this.completedWorkload = readFieldDouble(input);
                    addField(FIELD_ID_COMPLETEDWORKLOAD);
                    consumed = true;
                }
                break;

            case FIELD_ID_LASTSTATUSCODE:
                if (tagType == TAG_TYPE_VARINT32) {
                    this.lastStatusCode = readFieldInt(input);
                    addField(FIELD_ID_LASTSTATUSCODE);
                    consumed = true;
                }
                break;

            case FIELD_ID_LASTSTATUSMESSAGE:
                if (tagType == TAG_TYPE_LEN_PREFIXED) {
                    this.lastStatusMessage = readFieldString(input);
                    addField(FIELD_ID_LASTSTATUSMESSAGE);
                    consumed = true;
                }
                break;

            case FIELD_ID_OPTIONS:
                if (tagType == TAG_TYPE_EMBEDDEDMSG) {
                    if (this.options == null) {
                        this.options = new platon.PropSet();
                    }
                    readFieldObject(input, this.options);
                    addField(FIELD_ID_OPTIONS);
                    consumed = true;
                }
                break;
            }

            if (!consumed) {
                // unknown field, ignore it
                discardBytes(input, tagType);
            }

            final int currentPos = input.read_pos();
            messageLen -= (currentPos - lastPos);
            lastPos = currentPos;
        }

        endDefreeze(input);
    }

    // 将当前消息打包成JSON树, 返回JSON树的指针
    @Override
    public JsonNode freezeToJSON() throws FreezeException {
        JsonNode thisNode = JsonNode.createJsonObject();

        if (hasField(FIELD_ID_SUBJOBCB) && this.subjobCB != null) {
            JsonNode val_c_subjobCB = this.subjobCB.freezeToJSON();
            thisNode.put("subjobCB", val_c_subjobCB);
        }

        if (hasField(FIELD_ID_RETRYTIMES)) {
            JsonNode val_c_retryTimes = new JsonNode(this.retryTimes);
            thisNode.put("retryTimes", val_c_retryTimes);
        }

        if (hasField(FIELD_ID_WHENLASTENTERRETRYQUEUE)) {
            JsonNode val_c_whenLastEnterRetryQueue = new JsonNode(this.whenLastEnterRetryQueue);
            thisNode.put("whenLastEnterRetryQueue", val_c_whenLastEnterRetryQueue);
        }

        if (hasField(FIELD_ID_BORNTIME)) {
            JsonNode val_c_bornTime = new JsonNode(this.bornTime);
            thisNode.put("bornTime", val_c_bornTime);
        }

        if (hasField(FIELD_ID_FINISHEDTIME)) {
            JsonNode val_c_finishedTime = new JsonNode(this.finishedTime);
            thisNode.put("finishedTime", val_c_finishedTime);
        }

        if (hasField(FIELD_ID_STATE) && this.state != null) {
            JsonNode val_c_state = new JsonNode(this.state);
            thisNode.put("state", val_c_state);
        }

        if (hasField(FIELD_ID_RESTORED)) {
            JsonNode val_c_restored = new JsonNode(this.restored);
            thisNode.put("restored", val_c_restored);
        }

        if (hasField(FIELD_ID_TOTALWORKLOAD)) {
            JsonNode val_c_totalWorkload = new JsonNode(this.totalWorkload);
            thisNode.put("totalWorkload", val_c_totalWorkload);
        }

        if (hasField(FIELD_ID_COMPLETEDWORKLOAD)) {
            JsonNode val_c_completedWorkload = new JsonNode(this.completedWorkload);
            thisNode.put("completedWorkload", val_c_completedWorkload);
        }

        if (hasField(FIELD_ID_LASTSTATUSCODE)) {
            JsonNode val_c_lastStatusCode = new JsonNode(this.lastStatusCode);
            thisNode.put("lastStatusCode", val_c_lastStatusCode);
        }

        if (hasField(FIELD_ID_LASTSTATUSMESSAGE) && this.lastStatusMessage != null) {
            JsonNode val_c_lastStatusMessage = new JsonNode(this.lastStatusMessage);
            thisNode.put("lastStatusMessage", val_c_lastStatusMessage);
        }

        if (hasField(FIELD_ID_OPTIONS) && this.options != null) {
            JsonNode val_c_options = this.options.freezeToJSON();
            thisNode.put("options", val_c_options);
        }
        return thisNode;
    }

    // 从给定JSON树中解包, 并将解包得到的数据覆盖到当前消息上。
    @Override
    public void defreezeFromJSON(JsonNode inputJsonNode) throws DefreezeException {
        if (!inputJsonNode.isObject()) {
            throw new DefreezeException("input json is not object");
        }
        clear();

        JsonNode val_c_subjobCB = inputJsonNode.get("subjobCB");
        if (val_c_subjobCB != null && !val_c_subjobCB.isNull()) {
            this.getSubjobCB().defreezeFromJSON(val_c_subjobCB);
            addField(FIELD_ID_SUBJOBCB);
        }

        JsonNode val_c_retryTimes = inputJsonNode.get("retryTimes");
        if (val_c_retryTimes != null && !val_c_retryTimes.isNull()) {
            this.retryTimes = (int)val_c_retryTimes.asInt64();
            addField(FIELD_ID_RETRYTIMES);
        }

        JsonNode val_c_whenLastEnterRetryQueue = inputJsonNode.get("whenLastEnterRetryQueue");
        if (val_c_whenLastEnterRetryQueue != null && !val_c_whenLastEnterRetryQueue.isNull()) {
            this.whenLastEnterRetryQueue = val_c_whenLastEnterRetryQueue.asInt64();
            addField(FIELD_ID_WHENLASTENTERRETRYQUEUE);
        }

        JsonNode val_c_bornTime = inputJsonNode.get("bornTime");
        if (val_c_bornTime != null && !val_c_bornTime.isNull()) {
            this.bornTime = val_c_bornTime.asInt64();
            addField(FIELD_ID_BORNTIME);
        }

        JsonNode val_c_finishedTime = inputJsonNode.get("finishedTime");
        if (val_c_finishedTime != null && !val_c_finishedTime.isNull()) {
            this.finishedTime = val_c_finishedTime.asInt64();
            addField(FIELD_ID_FINISHEDTIME);
        }

        JsonNode val_c_state = inputJsonNode.get("state");
        if (val_c_state != null && !val_c_state.isNull()) {
            this.state = val_c_state.asString();
            addField(FIELD_ID_STATE);
        }

        JsonNode val_c_restored = inputJsonNode.get("restored");
        if (val_c_restored != null && !val_c_restored.isNull()) {
            this.restored = val_c_restored.asBool();
            addField(FIELD_ID_RESTORED);
        }

        JsonNode val_c_totalWorkload = inputJsonNode.get("totalWorkload");
        if (val_c_totalWorkload != null && !val_c_totalWorkload.isNull()) {
            this.totalWorkload = val_c_totalWorkload.asDouble();
            addField(FIELD_ID_TOTALWORKLOAD);
        }

        JsonNode val_c_completedWorkload = inputJsonNode.get("completedWorkload");
        if (val_c_completedWorkload != null && !val_c_completedWorkload.isNull()) {
            this.completedWorkload = val_c_completedWorkload.asDouble();
            addField(FIELD_ID_COMPLETEDWORKLOAD);
        }

        JsonNode val_c_lastStatusCode = inputJsonNode.get("lastStatusCode");
        if (val_c_lastStatusCode != null && !val_c_lastStatusCode.isNull()) {
            this.lastStatusCode = (int)val_c_lastStatusCode.asInt64();
            addField(FIELD_ID_LASTSTATUSCODE);
        }

        JsonNode val_c_lastStatusMessage = inputJsonNode.get("lastStatusMessage");
        if (val_c_lastStatusMessage != null && !val_c_lastStatusMessage.isNull()) {
            this.lastStatusMessage = val_c_lastStatusMessage.asString();
            addField(FIELD_ID_LASTSTATUSMESSAGE);
        }

        JsonNode val_c_options = inputJsonNode.get("options");
        if (val_c_options != null && !val_c_options.isNull()) {
            this.getOptions().defreezeFromJSON(val_c_options);
            addField(FIELD_ID_OPTIONS);
        }
    }
}

