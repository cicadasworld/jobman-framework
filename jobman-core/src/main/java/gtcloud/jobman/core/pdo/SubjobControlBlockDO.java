// Java file generated automatically from `schedpdo.fzdl'.
// $Timestamp: 2018-12-03 13:58:05
// DO NOT EDIT THIS FILE UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING.
//
package gtcloud.jobman.core.pdo;

import platon.ByteStream;
import platon.DefreezeException;
import platon.Freezable;
import platon.FreezerJSON;
import platon.FreezeException;
import platon.JsonNode;
import platon.Message;

public class SubjobControlBlockDO extends Message implements FreezerJSON
{
    public static final int FIELD_ID_JOBID = 0;
    public static final int FIELD_ID_JOBCATEGORY = 1;
    public static final int FIELD_ID_JOBCAPTION = 2;
    public static final int FIELD_ID_JOBPRIORITY = 3;
    public static final int FIELD_ID_SUBJOBCOUNT = 4;
    public static final int FIELD_ID_SUBJOBSEQNO = 5;
    public static final int FIELD_ID_ISREDUCE = 6;
    public static final int FIELD_ID_OPTIONS = 7;

    private String jobId = null;
    private String jobCategory = null;
    private String jobCaption = null;
    private int jobPriority = 0;
    private int subjobCount = 0;
    private int subjobSeqNo = 0;
    private boolean isReduce = false;
    private platon.PropSet options = null;

    public SubjobControlBlockDO() {
        addField(FIELD_ID_JOBID);
        addField(FIELD_ID_JOBCATEGORY);
        addField(FIELD_ID_JOBCAPTION);
        addField(FIELD_ID_JOBPRIORITY);
        addField(FIELD_ID_SUBJOBCOUNT);
        addField(FIELD_ID_SUBJOBSEQNO);
        addField(FIELD_ID_ISREDUCE);
        if (this.options != null) {
            addField(FIELD_ID_OPTIONS);
        }
    }

    public SubjobControlBlockDO(SubjobControlBlockDO other) {
        this.copyFrom(other);
    }

    public String getJobId() {
        return this.jobId;
    }

    public void setJobId(String val) {
        this.jobId = val;
    }

    public String getJobCategory() {
        return this.jobCategory;
    }

    public void setJobCategory(String val) {
        this.jobCategory = val;
    }

    public String getJobCaption() {
        return this.jobCaption;
    }

    public void setJobCaption(String val) {
        this.jobCaption = val;
    }

    public int getJobPriority() {
        return this.jobPriority;
    }

    public void setJobPriority(int val) {
        this.jobPriority = val;
    }

    public int getSubjobCount() {
        return this.subjobCount;
    }

    public void setSubjobCount(int val) {
        this.subjobCount = val;
    }

    public int getSubjobSeqNo() {
        return this.subjobSeqNo;
    }

    public void setSubjobSeqNo(int val) {
        this.subjobSeqNo = val;
    }

    public boolean getIsReduce() {
        return this.isReduce;
    }

    public void setIsReduce(boolean val) {
        this.isReduce = val;
    }

    public platon.PropSet getOptions() {
        if (this.options == null) {
            this.options = new platon.PropSet();
            this.addField(FIELD_ID_OPTIONS);
        }
        return this.options;
    }


    // 从给定对象拷贝数据到当前对象
    @Override
    public void copyFrom(Freezable other) {
        super.copyFrom(other);
        SubjobControlBlockDO from = (SubjobControlBlockDO)other;
        this.jobId = from.jobId;
        this.jobCategory = from.jobCategory;
        this.jobCaption = from.jobCaption;
        this.jobPriority = from.jobPriority;
        this.subjobCount = from.subjobCount;
        this.subjobSeqNo = from.subjobSeqNo;
        this.isReduce = from.isReduce;
        if (this.options == null) {
            this.options = new platon.PropSet();
        }
        this.options.copyFrom(from.getOptions());
    }

    // 克隆当前对象。
    @Override
    public Freezable makeClone() {
        SubjobControlBlockDO o = new SubjobControlBlockDO();
        o.copyFrom(this);
        return o;
    }

    public void clear() {
        this.jobId = null;
        this.jobCategory = null;
        this.jobCaption = null;
        this.jobPriority = 0;
        this.subjobCount = 0;
        this.subjobSeqNo = 0;
        this.isReduce = false;
        this.options = null;
        this.clearFields();
    }

    // 将当前对象打包进给定的字节流中。
    @Override
    public void freeze(ByteStream output) throws FreezeException {
        int[] cookie = new int[2];
        beginFreeze(output, cookie);

        if (hasField(FIELD_ID_JOBID)) {
            writeFieldString(output, FIELD_ID_JOBID, this.jobId);
        }

        if (hasField(FIELD_ID_JOBCATEGORY)) {
            writeFieldString(output, FIELD_ID_JOBCATEGORY, this.jobCategory);
        }

        if (hasField(FIELD_ID_JOBCAPTION)) {
            writeFieldString(output, FIELD_ID_JOBCAPTION, this.jobCaption);
        }

        if (hasField(FIELD_ID_JOBPRIORITY)) {
            writeFieldInt(output, FIELD_ID_JOBPRIORITY, this.jobPriority);
        }

        if (hasField(FIELD_ID_SUBJOBCOUNT)) {
            writeFieldInt(output, FIELD_ID_SUBJOBCOUNT, this.subjobCount);
        }

        if (hasField(FIELD_ID_SUBJOBSEQNO)) {
            writeFieldInt(output, FIELD_ID_SUBJOBSEQNO, this.subjobSeqNo);
        }

        if (hasField(FIELD_ID_ISREDUCE)) {
            writeFieldBool(output, FIELD_ID_ISREDUCE, this.isReduce);
        }

        if (hasField(FIELD_ID_OPTIONS)) {
            writeFieldObject(output, FIELD_ID_OPTIONS, this.options);
        }

        endFreeze(output, cookie);
    }

    // 从给定字节流中解包, 并将解包得到的数据覆盖到当前对象上。
    @Override
    public void defreeze(ByteStream input) throws DefreezeException {
        clear();

        int messageLen = beginDefreeze(input);
        int lastPos = input.read_pos();
        while (messageLen > 0) {
            int[] tuple = readTag(input);
            int tagType = tuple[0];
            int fieldId = tuple[1];

            boolean consumed = false;
            switch (fieldId) {
            case FIELD_ID_JOBID:
                if (tagType == TAG_TYPE_LEN_PREFIXED) {
                    this.jobId = readFieldString(input);
                    addField(FIELD_ID_JOBID);
                    consumed = true;
                }
                break;

            case FIELD_ID_JOBCATEGORY:
                if (tagType == TAG_TYPE_LEN_PREFIXED) {
                    this.jobCategory = readFieldString(input);
                    addField(FIELD_ID_JOBCATEGORY);
                    consumed = true;
                }
                break;

            case FIELD_ID_JOBCAPTION:
                if (tagType == TAG_TYPE_LEN_PREFIXED) {
                    this.jobCaption = readFieldString(input);
                    addField(FIELD_ID_JOBCAPTION);
                    consumed = true;
                }
                break;

            case FIELD_ID_JOBPRIORITY:
                if (tagType == TAG_TYPE_VARINT32) {
                    this.jobPriority = readFieldInt(input);
                    addField(FIELD_ID_JOBPRIORITY);
                    consumed = true;
                }
                break;

            case FIELD_ID_SUBJOBCOUNT:
                if (tagType == TAG_TYPE_VARINT32) {
                    this.subjobCount = readFieldInt(input);
                    addField(FIELD_ID_SUBJOBCOUNT);
                    consumed = true;
                }
                break;

            case FIELD_ID_SUBJOBSEQNO:
                if (tagType == TAG_TYPE_VARINT32) {
                    this.subjobSeqNo = readFieldInt(input);
                    addField(FIELD_ID_SUBJOBSEQNO);
                    consumed = true;
                }
                break;

            case FIELD_ID_ISREDUCE:
                if (tagType == TAG_TYPE_VARINT32) {
                    this.isReduce = readFieldBool(input);
                    addField(FIELD_ID_ISREDUCE);
                    consumed = true;
                }
                break;

            case FIELD_ID_OPTIONS:
                if (tagType == TAG_TYPE_EMBEDDEDMSG) {
                    if (this.options == null) {
                        this.options = new platon.PropSet();
                    }
                    readFieldObject(input, this.options);
                    addField(FIELD_ID_OPTIONS);
                    consumed = true;
                }
                break;
            }

            if (!consumed) {
                // unknown field, ignore it
                discardBytes(input, tagType);
            }

            final int currentPos = input.read_pos();
            messageLen -= (currentPos - lastPos);
            lastPos = currentPos;
        }

        endDefreeze(input);
    }

    // 将当前消息打包成JSON树, 返回JSON树的指针
    @Override
    public JsonNode freezeToJSON() throws FreezeException {
        JsonNode thisNode = JsonNode.createJsonObject();

        if (hasField(FIELD_ID_JOBID) && this.jobId != null) {
            JsonNode val_c_jobId = new JsonNode(this.jobId);
            thisNode.put("jobId", val_c_jobId);
        }

        if (hasField(FIELD_ID_JOBCATEGORY) && this.jobCategory != null) {
            JsonNode val_c_jobCategory = new JsonNode(this.jobCategory);
            thisNode.put("jobCategory", val_c_jobCategory);
        }

        if (hasField(FIELD_ID_JOBCAPTION) && this.jobCaption != null) {
            JsonNode val_c_jobCaption = new JsonNode(this.jobCaption);
            thisNode.put("jobCaption", val_c_jobCaption);
        }

        if (hasField(FIELD_ID_JOBPRIORITY)) {
            JsonNode val_c_jobPriority = new JsonNode(this.jobPriority);
            thisNode.put("jobPriority", val_c_jobPriority);
        }

        if (hasField(FIELD_ID_SUBJOBCOUNT)) {
            JsonNode val_c_subjobCount = new JsonNode(this.subjobCount);
            thisNode.put("subjobCount", val_c_subjobCount);
        }

        if (hasField(FIELD_ID_SUBJOBSEQNO)) {
            JsonNode val_c_subjobSeqNo = new JsonNode(this.subjobSeqNo);
            thisNode.put("subjobSeqNo", val_c_subjobSeqNo);
        }

        if (hasField(FIELD_ID_ISREDUCE)) {
            JsonNode val_c_isReduce = new JsonNode(this.isReduce);
            thisNode.put("isReduce", val_c_isReduce);
        }

        if (hasField(FIELD_ID_OPTIONS) && this.options != null) {
            JsonNode val_c_options = this.options.freezeToJSON();
            thisNode.put("options", val_c_options);
        }
        return thisNode;
    }

    // 从给定JSON树中解包, 并将解包得到的数据覆盖到当前消息上。
    @Override
    public void defreezeFromJSON(JsonNode inputJsonNode) throws DefreezeException {
        if (!inputJsonNode.isObject()) {
            throw new DefreezeException("input json is not object");
        }
        clear();

        JsonNode val_c_jobId = inputJsonNode.get("jobId");
        if (val_c_jobId != null && !val_c_jobId.isNull()) {
            this.jobId = val_c_jobId.asString();
            addField(FIELD_ID_JOBID);
        }

        JsonNode val_c_jobCategory = inputJsonNode.get("jobCategory");
        if (val_c_jobCategory != null && !val_c_jobCategory.isNull()) {
            this.jobCategory = val_c_jobCategory.asString();
            addField(FIELD_ID_JOBCATEGORY);
        }

        JsonNode val_c_jobCaption = inputJsonNode.get("jobCaption");
        if (val_c_jobCaption != null && !val_c_jobCaption.isNull()) {
            this.jobCaption = val_c_jobCaption.asString();
            addField(FIELD_ID_JOBCAPTION);
        }

        JsonNode val_c_jobPriority = inputJsonNode.get("jobPriority");
        if (val_c_jobPriority != null && !val_c_jobPriority.isNull()) {
            this.jobPriority = (int)val_c_jobPriority.asInt64();
            addField(FIELD_ID_JOBPRIORITY);
        }

        JsonNode val_c_subjobCount = inputJsonNode.get("subjobCount");
        if (val_c_subjobCount != null && !val_c_subjobCount.isNull()) {
            this.subjobCount = (int)val_c_subjobCount.asInt64();
            addField(FIELD_ID_SUBJOBCOUNT);
        }

        JsonNode val_c_subjobSeqNo = inputJsonNode.get("subjobSeqNo");
        if (val_c_subjobSeqNo != null && !val_c_subjobSeqNo.isNull()) {
            this.subjobSeqNo = (int)val_c_subjobSeqNo.asInt64();
            addField(FIELD_ID_SUBJOBSEQNO);
        }

        JsonNode val_c_isReduce = inputJsonNode.get("isReduce");
        if (val_c_isReduce != null && !val_c_isReduce.isNull()) {
            this.isReduce = val_c_isReduce.asBool();
            addField(FIELD_ID_ISREDUCE);
        }

        JsonNode val_c_options = inputJsonNode.get("options");
        if (val_c_options != null && !val_c_options.isNull()) {
            this.getOptions().defreezeFromJSON(val_c_options);
            addField(FIELD_ID_OPTIONS);
        }
    }
}

