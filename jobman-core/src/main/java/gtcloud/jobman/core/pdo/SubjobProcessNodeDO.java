// Java file generated automatically from `jobpdo.fzdl'.
// $Timestamp: 2018-04-18 15:58:28
// DO NOT EDIT THIS FILE UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING.
//
package gtcloud.jobman.core.pdo;

import platon.ByteStream;
import platon.DefreezeException;
import platon.Freezable;
import platon.FreezerJSON;
import platon.FreezeException;
import platon.JsonNode;
import platon.Message;

public class SubjobProcessNodeDO extends Message implements FreezerJSON
{
    public static final int FIELD_ID_NODEID = 0;
    public static final int FIELD_ID_SUPPORTEDJOBCATEGORYLIST = 1;
    public static final int FIELD_ID_MILLISSINCELASTALIVE = 2;
    public static final int FIELD_ID_ISALIVE = 3;
    public static final int FIELD_ID_SUBJOBQUEUELENGTH = 4;
    public static final int FIELD_ID_OPTIONS = 5;

    private String nodeId = null;
    private platon.StringSeq supportedJobCategoryList = null;
    private long millisSinceLastAlive = 0;
    private boolean isAlive = false;
    private int subjobQueueLength = 0;
    private platon.PropSet options = null;

    public SubjobProcessNodeDO() {
        addField(FIELD_ID_NODEID);
        if (this.supportedJobCategoryList != null) {
            addField(FIELD_ID_SUPPORTEDJOBCATEGORYLIST);
        }
        addField(FIELD_ID_MILLISSINCELASTALIVE);
        addField(FIELD_ID_ISALIVE);
        addField(FIELD_ID_SUBJOBQUEUELENGTH);
        if (this.options != null) {
            addField(FIELD_ID_OPTIONS);
        }
    }

    public SubjobProcessNodeDO(SubjobProcessNodeDO other) {
        this.copyFrom(other);
    }

    public String getNodeId() {
        return this.nodeId;
    }

    public void setNodeId(String val) {
        this.nodeId = val;
    }

    public platon.StringSeq getSupportedJobCategoryList() {
        if (this.supportedJobCategoryList == null) {
            this.supportedJobCategoryList = new platon.StringSeq();
            this.addField(FIELD_ID_SUPPORTEDJOBCATEGORYLIST);
        }
        return this.supportedJobCategoryList;
    }

    public long getMillisSinceLastAlive() {
        return this.millisSinceLastAlive;
    }

    public void setMillisSinceLastAlive(long val) {
        this.millisSinceLastAlive = val;
    }

    public boolean getIsAlive() {
        return this.isAlive;
    }

    public void setIsAlive(boolean val) {
        this.isAlive = val;
    }

    public int getSubjobQueueLength() {
        return this.subjobQueueLength;
    }

    public void setSubjobQueueLength(int val) {
        this.subjobQueueLength = val;
    }

    public platon.PropSet getOptions() {
        if (this.options == null) {
            this.options = new platon.PropSet();
            this.addField(FIELD_ID_OPTIONS);
        }
        return this.options;
    }


    // 从给定对象拷贝数据到当前对象
    @Override
    public void copyFrom(Freezable other) {
        super.copyFrom(other);
        SubjobProcessNodeDO from = (SubjobProcessNodeDO)other;
        this.nodeId = from.nodeId;
        if (this.supportedJobCategoryList == null) {
            this.supportedJobCategoryList = new platon.StringSeq();
        }
        this.supportedJobCategoryList.copyFrom(from.getSupportedJobCategoryList());
        this.millisSinceLastAlive = from.millisSinceLastAlive;
        this.isAlive = from.isAlive;
        this.subjobQueueLength = from.subjobQueueLength;
        if (this.options == null) {
            this.options = new platon.PropSet();
        }
        this.options.copyFrom(from.getOptions());
    }

    // 克隆当前对象。
    @Override
    public Freezable makeClone() {
        SubjobProcessNodeDO o = new SubjobProcessNodeDO();
        o.copyFrom(this);
        return o;
    }

    public void clear() {
        this.nodeId = null;
        this.supportedJobCategoryList = null;
        this.millisSinceLastAlive = 0;
        this.isAlive = false;
        this.subjobQueueLength = 0;
        this.options = null;
        this.clearFields();
    }

    // 将当前对象打包进给定的字节流中。
    @Override
    public void freeze(ByteStream output) throws FreezeException {
        int[] cookie = new int[2];
        beginFreeze(output, cookie);

        if (hasField(FIELD_ID_NODEID)) {
            writeFieldString(output, FIELD_ID_NODEID, this.nodeId);
        }

        if (hasField(FIELD_ID_SUPPORTEDJOBCATEGORYLIST)) {
            writeFieldObject(output, FIELD_ID_SUPPORTEDJOBCATEGORYLIST, this.supportedJobCategoryList);
        }

        if (hasField(FIELD_ID_MILLISSINCELASTALIVE)) {
            writeFieldLong(output, FIELD_ID_MILLISSINCELASTALIVE, this.millisSinceLastAlive);
        }

        if (hasField(FIELD_ID_ISALIVE)) {
            writeFieldBool(output, FIELD_ID_ISALIVE, this.isAlive);
        }

        if (hasField(FIELD_ID_SUBJOBQUEUELENGTH)) {
            writeFieldInt(output, FIELD_ID_SUBJOBQUEUELENGTH, this.subjobQueueLength);
        }

        if (hasField(FIELD_ID_OPTIONS)) {
            writeFieldObject(output, FIELD_ID_OPTIONS, this.options);
        }

        endFreeze(output, cookie);
    }

    // 从给定字节流中解包, 并将解包得到的数据覆盖到当前对象上。
    @Override
    public void defreeze(ByteStream input) throws DefreezeException {
        clear();

        int messageLen = beginDefreeze(input);
        int lastPos = input.read_pos();
        while (messageLen > 0) {
            int[] tuple = readTag(input);
            int tagType = tuple[0];
            int fieldId = tuple[1];

            boolean consumed = false;
            switch (fieldId) {
            case FIELD_ID_NODEID:
                if (tagType == TAG_TYPE_LEN_PREFIXED) {
                    this.nodeId = readFieldString(input);
                    addField(FIELD_ID_NODEID);
                    consumed = true;
                }
                break;

            case FIELD_ID_SUPPORTEDJOBCATEGORYLIST:
                if (tagType == TAG_TYPE_EMBEDDEDMSG) {
                    if (this.supportedJobCategoryList == null) {
                        this.supportedJobCategoryList = new platon.StringSeq();
                    }
                    readFieldObject(input, this.supportedJobCategoryList);
                    addField(FIELD_ID_SUPPORTEDJOBCATEGORYLIST);
                    consumed = true;
                }
                break;

            case FIELD_ID_MILLISSINCELASTALIVE:
                if (tagType == TAG_TYPE_FIXED64) {
                    this.millisSinceLastAlive = readFieldLong(input);
                    addField(FIELD_ID_MILLISSINCELASTALIVE);
                    consumed = true;
                }
                break;

            case FIELD_ID_ISALIVE:
                if (tagType == TAG_TYPE_VARINT32) {
                    this.isAlive = readFieldBool(input);
                    addField(FIELD_ID_ISALIVE);
                    consumed = true;
                }
                break;

            case FIELD_ID_SUBJOBQUEUELENGTH:
                if (tagType == TAG_TYPE_VARINT32) {
                    this.subjobQueueLength = readFieldInt(input);
                    addField(FIELD_ID_SUBJOBQUEUELENGTH);
                    consumed = true;
                }
                break;

            case FIELD_ID_OPTIONS:
                if (tagType == TAG_TYPE_EMBEDDEDMSG) {
                    if (this.options == null) {
                        this.options = new platon.PropSet();
                    }
                    readFieldObject(input, this.options);
                    addField(FIELD_ID_OPTIONS);
                    consumed = true;
                }
                break;
            }

            if (!consumed) {
                // unknown field, ignore it
                discardBytes(input, tagType);
            }

            final int currentPos = input.read_pos();
            messageLen -= (currentPos - lastPos);
            lastPos = currentPos;
        }

        endDefreeze(input);
    }

    // 将当前消息打包成JSON树, 返回JSON树的指针
    @Override
    public JsonNode freezeToJSON() throws FreezeException {
        JsonNode thisNode = JsonNode.createJsonObject();

        if (hasField(FIELD_ID_NODEID) && this.nodeId != null) {
            JsonNode val_c_nodeId = new JsonNode(this.nodeId);
            thisNode.put("nodeId", val_c_nodeId);
        }

        if (hasField(FIELD_ID_SUPPORTEDJOBCATEGORYLIST) && this.supportedJobCategoryList != null) {
            JsonNode val_c_supportedJobCategoryList = this.supportedJobCategoryList.freezeToJSON();
            thisNode.put("supportedJobCategoryList", val_c_supportedJobCategoryList);
        }

        if (hasField(FIELD_ID_MILLISSINCELASTALIVE)) {
            JsonNode val_c_millisSinceLastAlive = new JsonNode(this.millisSinceLastAlive);
            thisNode.put("millisSinceLastAlive", val_c_millisSinceLastAlive);
        }

        if (hasField(FIELD_ID_ISALIVE)) {
            JsonNode val_c_isAlive = new JsonNode(this.isAlive);
            thisNode.put("isAlive", val_c_isAlive);
        }

        if (hasField(FIELD_ID_SUBJOBQUEUELENGTH)) {
            JsonNode val_c_subjobQueueLength = new JsonNode(this.subjobQueueLength);
            thisNode.put("subjobQueueLength", val_c_subjobQueueLength);
        }

        if (hasField(FIELD_ID_OPTIONS) && this.options != null) {
            JsonNode val_c_options = this.options.freezeToJSON();
            thisNode.put("options", val_c_options);
        }
        return thisNode;
    }

    // 从给定JSON树中解包, 并将解包得到的数据覆盖到当前消息上。
    @Override
    public void defreezeFromJSON(JsonNode inputJsonNode) throws DefreezeException {
        if (!inputJsonNode.isObject()) {
            throw new DefreezeException("input json is not object");
        }
        clear();

        JsonNode val_c_nodeId = inputJsonNode.get("nodeId");
        if (val_c_nodeId != null && !val_c_nodeId.isNull()) {
            this.nodeId = val_c_nodeId.asString();
            addField(FIELD_ID_NODEID);
        }

        JsonNode val_c_supportedJobCategoryList = inputJsonNode.get("supportedJobCategoryList");
        if (val_c_supportedJobCategoryList != null && !val_c_supportedJobCategoryList.isNull()) {
            this.getSupportedJobCategoryList().defreezeFromJSON(val_c_supportedJobCategoryList);
            addField(FIELD_ID_SUPPORTEDJOBCATEGORYLIST);
        }

        JsonNode val_c_millisSinceLastAlive = inputJsonNode.get("millisSinceLastAlive");
        if (val_c_millisSinceLastAlive != null && !val_c_millisSinceLastAlive.isNull()) {
            this.millisSinceLastAlive = val_c_millisSinceLastAlive.asInt64();
            addField(FIELD_ID_MILLISSINCELASTALIVE);
        }

        JsonNode val_c_isAlive = inputJsonNode.get("isAlive");
        if (val_c_isAlive != null && !val_c_isAlive.isNull()) {
            this.isAlive = val_c_isAlive.asBool();
            addField(FIELD_ID_ISALIVE);
        }

        JsonNode val_c_subjobQueueLength = inputJsonNode.get("subjobQueueLength");
        if (val_c_subjobQueueLength != null && !val_c_subjobQueueLength.isNull()) {
            this.subjobQueueLength = (int)val_c_subjobQueueLength.asInt64();
            addField(FIELD_ID_SUBJOBQUEUELENGTH);
        }

        JsonNode val_c_options = inputJsonNode.get("options");
        if (val_c_options != null && !val_c_options.isNull()) {
            this.getOptions().defreezeFromJSON(val_c_options);
            addField(FIELD_ID_OPTIONS);
        }
    }
}

