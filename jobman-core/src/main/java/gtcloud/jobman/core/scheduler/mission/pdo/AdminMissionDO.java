// Java file generated automatically from `mission.fzdl'.
// $Timestamp: 2019-07-19 09:40:49
// DO NOT EDIT THIS FILE UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING.
//
package gtcloud.jobman.core.scheduler.mission.pdo;

import platon.ByteStream;
import platon.DefreezeException;
import platon.Freezable;
import platon.FreezerJSON;
import platon.FreezeException;
import platon.JsonNode;
import platon.Message;

public class AdminMissionDO extends Message implements FreezerJSON
{
    public static final int FIELD_ID_ID = 0;
    public static final int FIELD_ID_CAPTION = 1;
    public static final int FIELD_ID_MISSIONTYPE = 2;
    public static final int FIELD_ID_MISSIONEPOCH = 3;
    public static final int FIELD_ID_SUBMITTERUSERID = 4;
    public static final int FIELD_ID_SUBMITTERHOST = 5;
    public static final int FIELD_ID_ITEMS = 6;
    public static final int FIELD_ID_OPTIONS = 7;

    private String id = null;
    private String caption = null;
    private String missionType = null;
    private long missionEpoch = 0;
    private String submitterUserId = null;
    private String submitterHost = null;
    private AdminMissionItemListDO items = null;
    private platon.PropSet options = null;

    public AdminMissionDO() {
        addField(FIELD_ID_ID);
        addField(FIELD_ID_CAPTION);
        addField(FIELD_ID_MISSIONTYPE);
        addField(FIELD_ID_MISSIONEPOCH);
        addField(FIELD_ID_SUBMITTERUSERID);
        addField(FIELD_ID_SUBMITTERHOST);
        if (this.items != null) {
            addField(FIELD_ID_ITEMS);
        }
        if (this.options != null) {
            addField(FIELD_ID_OPTIONS);
        }
    }

    public AdminMissionDO(AdminMissionDO other) {
        this.copyFrom(other);
    }

    public String getId() {
        return this.id;
    }

    public void setId(String val) {
        this.id = val;
    }

    public String getCaption() {
        return this.caption;
    }

    public void setCaption(String val) {
        this.caption = val;
    }

    public String getMissionType() {
        return this.missionType;
    }

    public void setMissionType(String val) {
        this.missionType = val;
    }

    public long getMissionEpoch() {
        return this.missionEpoch;
    }

    public void setMissionEpoch(long val) {
        this.missionEpoch = val;
    }

    public String getSubmitterUserId() {
        return this.submitterUserId;
    }

    public void setSubmitterUserId(String val) {
        this.submitterUserId = val;
    }

    public String getSubmitterHost() {
        return this.submitterHost;
    }

    public void setSubmitterHost(String val) {
        this.submitterHost = val;
    }

    public AdminMissionItemListDO getItems() {
        if (this.items == null) {
            this.items = new AdminMissionItemListDO();
            this.addField(FIELD_ID_ITEMS);
        }
        return this.items;
    }

    public platon.PropSet getOptions() {
        if (this.options == null) {
            this.options = new platon.PropSet();
            this.addField(FIELD_ID_OPTIONS);
        }
        return this.options;
    }


    // 从给定对象拷贝数据到当前对象
    @Override
    public void copyFrom(Freezable other) {
        super.copyFrom(other);
        AdminMissionDO from = (AdminMissionDO)other;
        this.id = from.id;
        this.caption = from.caption;
        this.missionType = from.missionType;
        this.missionEpoch = from.missionEpoch;
        this.submitterUserId = from.submitterUserId;
        this.submitterHost = from.submitterHost;
        if (this.items == null) {
            this.items = new AdminMissionItemListDO();
        }
        this.items.copyFrom(from.getItems());
        if (this.options == null) {
            this.options = new platon.PropSet();
        }
        this.options.copyFrom(from.getOptions());
    }

    // 克隆当前对象。
    @Override
    public Freezable makeClone() {
        AdminMissionDO o = new AdminMissionDO();
        o.copyFrom(this);
        return o;
    }

    public void clear() {
        this.id = null;
        this.caption = null;
        this.missionType = null;
        this.missionEpoch = 0;
        this.submitterUserId = null;
        this.submitterHost = null;
        this.items = null;
        this.options = null;
        this.clearFields();
    }

    // 将当前对象打包进给定的字节流中。
    @Override
    public void freeze(ByteStream output) throws FreezeException {
        int[] cookie = new int[2];
        beginFreeze(output, cookie);

        if (hasField(FIELD_ID_ID)) {
            writeFieldString(output, FIELD_ID_ID, this.id);
        }

        if (hasField(FIELD_ID_CAPTION)) {
            writeFieldString(output, FIELD_ID_CAPTION, this.caption);
        }

        if (hasField(FIELD_ID_MISSIONTYPE)) {
            writeFieldString(output, FIELD_ID_MISSIONTYPE, this.missionType);
        }

        if (hasField(FIELD_ID_MISSIONEPOCH)) {
            writeFieldLong(output, FIELD_ID_MISSIONEPOCH, this.missionEpoch);
        }

        if (hasField(FIELD_ID_SUBMITTERUSERID)) {
            writeFieldString(output, FIELD_ID_SUBMITTERUSERID, this.submitterUserId);
        }

        if (hasField(FIELD_ID_SUBMITTERHOST)) {
            writeFieldString(output, FIELD_ID_SUBMITTERHOST, this.submitterHost);
        }

        if (hasField(FIELD_ID_ITEMS)) {
            writeFieldObject(output, FIELD_ID_ITEMS, this.items);
        }

        if (hasField(FIELD_ID_OPTIONS)) {
            writeFieldObject(output, FIELD_ID_OPTIONS, this.options);
        }

        endFreeze(output, cookie);
    }

    // 从给定字节流中解包, 并将解包得到的数据覆盖到当前对象上。
    @Override
    public void defreeze(ByteStream input) throws DefreezeException {
        clear();

        int messageLen = beginDefreeze(input);
        int lastPos = input.read_pos();
        while (messageLen > 0) {
            int[] tuple = readTag(input);
            int tagType = tuple[0];
            int fieldId = tuple[1];

            boolean consumed = false;
            switch (fieldId) {
            case FIELD_ID_ID:
                if (tagType == TAG_TYPE_LEN_PREFIXED) {
                    this.id = readFieldString(input);
                    addField(FIELD_ID_ID);
                    consumed = true;
                }
                break;

            case FIELD_ID_CAPTION:
                if (tagType == TAG_TYPE_LEN_PREFIXED) {
                    this.caption = readFieldString(input);
                    addField(FIELD_ID_CAPTION);
                    consumed = true;
                }
                break;

            case FIELD_ID_MISSIONTYPE:
                if (tagType == TAG_TYPE_LEN_PREFIXED) {
                    this.missionType = readFieldString(input);
                    addField(FIELD_ID_MISSIONTYPE);
                    consumed = true;
                }
                break;

            case FIELD_ID_MISSIONEPOCH:
                if (tagType == TAG_TYPE_FIXED64) {
                    this.missionEpoch = readFieldLong(input);
                    addField(FIELD_ID_MISSIONEPOCH);
                    consumed = true;
                }
                break;

            case FIELD_ID_SUBMITTERUSERID:
                if (tagType == TAG_TYPE_LEN_PREFIXED) {
                    this.submitterUserId = readFieldString(input);
                    addField(FIELD_ID_SUBMITTERUSERID);
                    consumed = true;
                }
                break;

            case FIELD_ID_SUBMITTERHOST:
                if (tagType == TAG_TYPE_LEN_PREFIXED) {
                    this.submitterHost = readFieldString(input);
                    addField(FIELD_ID_SUBMITTERHOST);
                    consumed = true;
                }
                break;

            case FIELD_ID_ITEMS:
                if (tagType == TAG_TYPE_EMBEDDEDMSG) {
                    if (this.items == null) {
                        this.items = new AdminMissionItemListDO();
                    }
                    readFieldObject(input, this.items);
                    addField(FIELD_ID_ITEMS);
                    consumed = true;
                }
                break;

            case FIELD_ID_OPTIONS:
                if (tagType == TAG_TYPE_EMBEDDEDMSG) {
                    if (this.options == null) {
                        this.options = new platon.PropSet();
                    }
                    readFieldObject(input, this.options);
                    addField(FIELD_ID_OPTIONS);
                    consumed = true;
                }
                break;
            }

            if (!consumed) {
                // unknown field, ignore it
                discardBytes(input, tagType);
            }

            final int currentPos = input.read_pos();
            messageLen -= (currentPos - lastPos);
            lastPos = currentPos;
        }

        endDefreeze(input);
    }

    // 将当前消息打包成JSON树, 返回JSON树的指针
    @Override
    public JsonNode freezeToJSON() throws FreezeException {
        JsonNode thisNode = JsonNode.createJsonObject();

        if (hasField(FIELD_ID_ID) && this.id != null) {
            JsonNode val_c_id = new JsonNode(this.id);
            thisNode.put("id", val_c_id);
        }

        if (hasField(FIELD_ID_CAPTION) && this.caption != null) {
            JsonNode val_c_caption = new JsonNode(this.caption);
            thisNode.put("caption", val_c_caption);
        }

        if (hasField(FIELD_ID_MISSIONTYPE) && this.missionType != null) {
            JsonNode val_c_missionType = new JsonNode(this.missionType);
            thisNode.put("missionType", val_c_missionType);
        }

        if (hasField(FIELD_ID_MISSIONEPOCH)) {
            JsonNode val_c_missionEpoch = new JsonNode(this.missionEpoch);
            thisNode.put("missionEpoch", val_c_missionEpoch);
        }

        if (hasField(FIELD_ID_SUBMITTERUSERID) && this.submitterUserId != null) {
            JsonNode val_c_submitterUserId = new JsonNode(this.submitterUserId);
            thisNode.put("submitterUserId", val_c_submitterUserId);
        }

        if (hasField(FIELD_ID_SUBMITTERHOST) && this.submitterHost != null) {
            JsonNode val_c_submitterHost = new JsonNode(this.submitterHost);
            thisNode.put("submitterHost", val_c_submitterHost);
        }

        if (hasField(FIELD_ID_ITEMS) && this.items != null) {
            JsonNode val_c_items = this.items.freezeToJSON();
            thisNode.put("items", val_c_items);
        }

        if (hasField(FIELD_ID_OPTIONS) && this.options != null) {
            JsonNode val_c_options = this.options.freezeToJSON();
            thisNode.put("options", val_c_options);
        }
        return thisNode;
    }

    // 从给定JSON树中解包, 并将解包得到的数据覆盖到当前消息上。
    @Override
    public void defreezeFromJSON(JsonNode inputJsonNode) throws DefreezeException {
        if (!inputJsonNode.isObject()) {
            throw new DefreezeException("input json is not object");
        }
        clear();

        JsonNode val_c_id = inputJsonNode.get("id");
        if (val_c_id != null && !val_c_id.isNull()) {
            this.id = val_c_id.asString();
            addField(FIELD_ID_ID);
        }

        JsonNode val_c_caption = inputJsonNode.get("caption");
        if (val_c_caption != null && !val_c_caption.isNull()) {
            this.caption = val_c_caption.asString();
            addField(FIELD_ID_CAPTION);
        }

        JsonNode val_c_missionType = inputJsonNode.get("missionType");
        if (val_c_missionType != null && !val_c_missionType.isNull()) {
            this.missionType = val_c_missionType.asString();
            addField(FIELD_ID_MISSIONTYPE);
        }

        JsonNode val_c_missionEpoch = inputJsonNode.get("missionEpoch");
        if (val_c_missionEpoch != null && !val_c_missionEpoch.isNull()) {
            this.missionEpoch = val_c_missionEpoch.asInt64();
            addField(FIELD_ID_MISSIONEPOCH);
        }

        JsonNode val_c_submitterUserId = inputJsonNode.get("submitterUserId");
        if (val_c_submitterUserId != null && !val_c_submitterUserId.isNull()) {
            this.submitterUserId = val_c_submitterUserId.asString();
            addField(FIELD_ID_SUBMITTERUSERID);
        }

        JsonNode val_c_submitterHost = inputJsonNode.get("submitterHost");
        if (val_c_submitterHost != null && !val_c_submitterHost.isNull()) {
            this.submitterHost = val_c_submitterHost.asString();
            addField(FIELD_ID_SUBMITTERHOST);
        }

        JsonNode val_c_items = inputJsonNode.get("items");
        if (val_c_items != null && !val_c_items.isNull()) {
            this.getItems().defreezeFromJSON(val_c_items);
            addField(FIELD_ID_ITEMS);
        }

        JsonNode val_c_options = inputJsonNode.get("options");
        if (val_c_options != null && !val_c_options.isNull()) {
            this.getOptions().defreezeFromJSON(val_c_options);
            addField(FIELD_ID_OPTIONS);
        }
    }
}

