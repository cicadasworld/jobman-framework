// Java file generated automatically from `autogen.fzdl'.
// $Timestamp: 2018-11-28 18:08:43
// DO NOT EDIT THIS FILE UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING.
//
package gtcloud.common.cynosure.pdo;

import platon.ByteStream;
import platon.DefreezeException;
import platon.Freezable;
import platon.FreezerJSON;
import platon.FreezeException;
import platon.JsonNode;
import platon.Message;

public class ProbeReqDO extends Message implements FreezerJSON
{
    public static final int FIELD_ID_MAGICNUMBER = 0;
    public static final int FIELD_ID_GROUPNAME = 1;
    public static final int FIELD_ID_SERVEREPOCH = 2;
    public static final int FIELD_ID_CLIENTADDRESS = 3;
    public static final int FIELD_ID_CLIENTPID = 4;
    public static final int FIELD_ID_CLIENTAPPNAMES = 5;
    public static final int FIELD_ID_CLIENTPARAMS = 6;

    private int magicNumber = 20181121;
    private String groupName = null;
    private long serverEpoch = 0;
    private String clientAddress = null;
    private int clientPid = 0;
    private platon.StringSeq clientAppNames = null;
    private platon.PropSet clientParams = null;

    public ProbeReqDO() {
        addField(FIELD_ID_MAGICNUMBER);
        addField(FIELD_ID_GROUPNAME);
        addField(FIELD_ID_SERVEREPOCH);
        addField(FIELD_ID_CLIENTADDRESS);
        addField(FIELD_ID_CLIENTPID);
        if (this.clientAppNames != null) {
            addField(FIELD_ID_CLIENTAPPNAMES);
        }
        if (this.clientParams != null) {
            addField(FIELD_ID_CLIENTPARAMS);
        }
    }

    public ProbeReqDO(ProbeReqDO other) {
        this.copyFrom(other);
    }

    public int getMagicNumber() {
        return this.magicNumber;
    }

    public void setMagicNumber(int val) {
        this.magicNumber = val;
    }

    public String getGroupName() {
        return this.groupName;
    }

    public void setGroupName(String val) {
        this.groupName = val;
    }

    public long getServerEpoch() {
        return this.serverEpoch;
    }

    public void setServerEpoch(long val) {
        this.serverEpoch = val;
    }

    public String getClientAddress() {
        return this.clientAddress;
    }

    public void setClientAddress(String val) {
        this.clientAddress = val;
    }

    public int getClientPid() {
        return this.clientPid;
    }

    public void setClientPid(int val) {
        this.clientPid = val;
    }

    public platon.StringSeq getClientAppNames() {
        if (this.clientAppNames == null) {
            this.clientAppNames = new platon.StringSeq();
            this.addField(FIELD_ID_CLIENTAPPNAMES);
        }
        return this.clientAppNames;
    }

    public platon.PropSet getClientParams() {
        if (this.clientParams == null) {
            this.clientParams = new platon.PropSet();
            this.addField(FIELD_ID_CLIENTPARAMS);
        }
        return this.clientParams;
    }


    // 从给定对象拷贝数据到当前对象
    @Override
    public void copyFrom(Freezable other) {
        super.copyFrom(other);
        ProbeReqDO from = (ProbeReqDO)other;
        this.magicNumber = from.magicNumber;
        this.groupName = from.groupName;
        this.serverEpoch = from.serverEpoch;
        this.clientAddress = from.clientAddress;
        this.clientPid = from.clientPid;
        if (this.clientAppNames == null) {
            this.clientAppNames = new platon.StringSeq();
        }
        this.clientAppNames.copyFrom(from.getClientAppNames());
        if (this.clientParams == null) {
            this.clientParams = new platon.PropSet();
        }
        this.clientParams.copyFrom(from.getClientParams());
    }

    // 克隆当前对象。
    @Override
    public Freezable makeClone() {
        ProbeReqDO o = new ProbeReqDO();
        o.copyFrom(this);
        return o;
    }

    public void clear() {
        this.magicNumber = 0;
        this.groupName = null;
        this.serverEpoch = 0;
        this.clientAddress = null;
        this.clientPid = 0;
        this.clientAppNames = null;
        this.clientParams = null;
        this.clearFields();
    }

    // 将当前对象打包进给定的字节流中。
    @Override
    public void freeze(ByteStream output) throws FreezeException {
        int[] cookie = new int[2];
        beginFreeze(output, cookie);

        if (hasField(FIELD_ID_MAGICNUMBER)) {
            writeFieldInt(output, FIELD_ID_MAGICNUMBER, this.magicNumber);
        }

        if (hasField(FIELD_ID_GROUPNAME)) {
            writeFieldString(output, FIELD_ID_GROUPNAME, this.groupName);
        }

        if (hasField(FIELD_ID_SERVEREPOCH)) {
            writeFieldLong(output, FIELD_ID_SERVEREPOCH, this.serverEpoch);
        }

        if (hasField(FIELD_ID_CLIENTADDRESS)) {
            writeFieldString(output, FIELD_ID_CLIENTADDRESS, this.clientAddress);
        }

        if (hasField(FIELD_ID_CLIENTPID)) {
            writeFieldInt(output, FIELD_ID_CLIENTPID, this.clientPid);
        }

        if (hasField(FIELD_ID_CLIENTAPPNAMES)) {
            writeFieldObject(output, FIELD_ID_CLIENTAPPNAMES, this.clientAppNames);
        }

        if (hasField(FIELD_ID_CLIENTPARAMS)) {
            writeFieldObject(output, FIELD_ID_CLIENTPARAMS, this.clientParams);
        }

        endFreeze(output, cookie);
    }

    // 从给定字节流中解包, 并将解包得到的数据覆盖到当前对象上。
    @Override
    public void defreeze(ByteStream input) throws DefreezeException {
        clear();

        int messageLen = beginDefreeze(input);
        int lastPos = input.read_pos();
        while (messageLen > 0) {
            int[] tuple = readTag(input);
            int tagType = tuple[0];
            int fieldId = tuple[1];

            boolean consumed = false;
            switch (fieldId) {
            case FIELD_ID_MAGICNUMBER:
                if (tagType == TAG_TYPE_VARINT32) {
                    this.magicNumber = readFieldInt(input);
                    addField(FIELD_ID_MAGICNUMBER);
                    consumed = true;
                }
                break;

            case FIELD_ID_GROUPNAME:
                if (tagType == TAG_TYPE_LEN_PREFIXED) {
                    this.groupName = readFieldString(input);
                    addField(FIELD_ID_GROUPNAME);
                    consumed = true;
                }
                break;

            case FIELD_ID_SERVEREPOCH:
                if (tagType == TAG_TYPE_FIXED64) {
                    this.serverEpoch = readFieldLong(input);
                    addField(FIELD_ID_SERVEREPOCH);
                    consumed = true;
                }
                break;

            case FIELD_ID_CLIENTADDRESS:
                if (tagType == TAG_TYPE_LEN_PREFIXED) {
                    this.clientAddress = readFieldString(input);
                    addField(FIELD_ID_CLIENTADDRESS);
                    consumed = true;
                }
                break;

            case FIELD_ID_CLIENTPID:
                if (tagType == TAG_TYPE_VARINT32) {
                    this.clientPid = readFieldInt(input);
                    addField(FIELD_ID_CLIENTPID);
                    consumed = true;
                }
                break;

            case FIELD_ID_CLIENTAPPNAMES:
                if (tagType == TAG_TYPE_EMBEDDEDMSG) {
                    if (this.clientAppNames == null) {
                        this.clientAppNames = new platon.StringSeq();
                    }
                    readFieldObject(input, this.clientAppNames);
                    addField(FIELD_ID_CLIENTAPPNAMES);
                    consumed = true;
                }
                break;

            case FIELD_ID_CLIENTPARAMS:
                if (tagType == TAG_TYPE_EMBEDDEDMSG) {
                    if (this.clientParams == null) {
                        this.clientParams = new platon.PropSet();
                    }
                    readFieldObject(input, this.clientParams);
                    addField(FIELD_ID_CLIENTPARAMS);
                    consumed = true;
                }
                break;
            }

            if (!consumed) {
                // unknown field, ignore it
                discardBytes(input, tagType);
            }

            final int currentPos = input.read_pos();
            messageLen -= (currentPos - lastPos);
            lastPos = currentPos;
        }

        endDefreeze(input);
    }

    // 将当前消息打包成JSON树, 返回JSON树的指针
    @Override
    public JsonNode freezeToJSON() throws FreezeException {
        JsonNode thisNode = JsonNode.createJsonObject();

        if (hasField(FIELD_ID_MAGICNUMBER)) {
            JsonNode val_c_magicNumber = new JsonNode(this.magicNumber);
            thisNode.put("magicNumber", val_c_magicNumber);
        }

        if (hasField(FIELD_ID_GROUPNAME) && this.groupName != null) {
            JsonNode val_c_groupName = new JsonNode(this.groupName);
            thisNode.put("groupName", val_c_groupName);
        }

        if (hasField(FIELD_ID_SERVEREPOCH)) {
            JsonNode val_c_serverEpoch = new JsonNode(this.serverEpoch);
            thisNode.put("serverEpoch", val_c_serverEpoch);
        }

        if (hasField(FIELD_ID_CLIENTADDRESS) && this.clientAddress != null) {
            JsonNode val_c_clientAddress = new JsonNode(this.clientAddress);
            thisNode.put("clientAddress", val_c_clientAddress);
        }

        if (hasField(FIELD_ID_CLIENTPID)) {
            JsonNode val_c_clientPid = new JsonNode(this.clientPid);
            thisNode.put("clientPid", val_c_clientPid);
        }

        if (hasField(FIELD_ID_CLIENTAPPNAMES) && this.clientAppNames != null) {
            JsonNode val_c_clientAppNames = this.clientAppNames.freezeToJSON();
            thisNode.put("clientAppNames", val_c_clientAppNames);
        }

        if (hasField(FIELD_ID_CLIENTPARAMS) && this.clientParams != null) {
            JsonNode val_c_clientParams = this.clientParams.freezeToJSON();
            thisNode.put("clientParams", val_c_clientParams);
        }
        return thisNode;
    }

    // 从给定JSON树中解包, 并将解包得到的数据覆盖到当前消息上。
    @Override
    public void defreezeFromJSON(JsonNode inputJsonNode) throws DefreezeException {
        if (!inputJsonNode.isObject()) {
            throw new DefreezeException("input json is not object");
        }
        clear();

        JsonNode val_c_magicNumber = inputJsonNode.get("magicNumber");
        if (val_c_magicNumber != null && !val_c_magicNumber.isNull()) {
            this.magicNumber = (int)val_c_magicNumber.asInt64();
            addField(FIELD_ID_MAGICNUMBER);
        }

        JsonNode val_c_groupName = inputJsonNode.get("groupName");
        if (val_c_groupName != null && !val_c_groupName.isNull()) {
            this.groupName = val_c_groupName.asString();
            addField(FIELD_ID_GROUPNAME);
        }

        JsonNode val_c_serverEpoch = inputJsonNode.get("serverEpoch");
        if (val_c_serverEpoch != null && !val_c_serverEpoch.isNull()) {
            this.serverEpoch = val_c_serverEpoch.asInt64();
            addField(FIELD_ID_SERVEREPOCH);
        }

        JsonNode val_c_clientAddress = inputJsonNode.get("clientAddress");
        if (val_c_clientAddress != null && !val_c_clientAddress.isNull()) {
            this.clientAddress = val_c_clientAddress.asString();
            addField(FIELD_ID_CLIENTADDRESS);
        }

        JsonNode val_c_clientPid = inputJsonNode.get("clientPid");
        if (val_c_clientPid != null && !val_c_clientPid.isNull()) {
            this.clientPid = (int)val_c_clientPid.asInt64();
            addField(FIELD_ID_CLIENTPID);
        }

        JsonNode val_c_clientAppNames = inputJsonNode.get("clientAppNames");
        if (val_c_clientAppNames != null && !val_c_clientAppNames.isNull()) {
            this.getClientAppNames().defreezeFromJSON(val_c_clientAppNames);
            addField(FIELD_ID_CLIENTAPPNAMES);
        }

        JsonNode val_c_clientParams = inputJsonNode.get("clientParams");
        if (val_c_clientParams != null && !val_c_clientParams.isNull()) {
            this.getClientParams().defreezeFromJSON(val_c_clientParams);
            addField(FIELD_ID_CLIENTPARAMS);
        }
    }
}

