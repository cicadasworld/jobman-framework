// Java file generated automatically from `autogen.fzdl'.
// $Timestamp: 2018-11-28 18:08:44
// DO NOT EDIT THIS FILE UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING.
//
package gtcloud.common.cynosure.pdo;

import platon.ByteStream;
import platon.DefreezeException;
import platon.Freezable;
import platon.FreezerJSON;
import platon.FreezeException;
import platon.JsonNode;
import platon.Message;

public class FileDO extends Message implements FreezerJSON
{
    public static final int FIELD_ID_FILENAME = 0;
    public static final int FIELD_ID_CONTENTTYPE = 1;
    public static final int FIELD_ID_UPDATESEQ = 2;

    private String fileName = null;
    private String contentType = null;
    private int updateSeq = 0;

    public FileDO() {
        addField(FIELD_ID_FILENAME);
        addField(FIELD_ID_CONTENTTYPE);
        addField(FIELD_ID_UPDATESEQ);
    }

    public FileDO(FileDO other) {
        this.copyFrom(other);
    }

    public String getFileName() {
        return this.fileName;
    }

    public void setFileName(String val) {
        this.fileName = val;
    }

    public String getContentType() {
        return this.contentType;
    }

    public void setContentType(String val) {
        this.contentType = val;
    }

    public int getUpdateSeq() {
        return this.updateSeq;
    }

    public void setUpdateSeq(int val) {
        this.updateSeq = val;
    }


    // 从给定对象拷贝数据到当前对象
    @Override
    public void copyFrom(Freezable other) {
        super.copyFrom(other);
        FileDO from = (FileDO)other;
        this.fileName = from.fileName;
        this.contentType = from.contentType;
        this.updateSeq = from.updateSeq;
    }

    // 克隆当前对象。
    @Override
    public Freezable makeClone() {
        FileDO o = new FileDO();
        o.copyFrom(this);
        return o;
    }

    public void clear() {
        this.fileName = null;
        this.contentType = null;
        this.updateSeq = 0;
        this.clearFields();
    }

    // 将当前对象打包进给定的字节流中。
    @Override
    public void freeze(ByteStream output) throws FreezeException {
        int[] cookie = new int[2];
        beginFreeze(output, cookie);

        if (hasField(FIELD_ID_FILENAME)) {
            writeFieldString(output, FIELD_ID_FILENAME, this.fileName);
        }

        if (hasField(FIELD_ID_CONTENTTYPE)) {
            writeFieldString(output, FIELD_ID_CONTENTTYPE, this.contentType);
        }

        if (hasField(FIELD_ID_UPDATESEQ)) {
            writeFieldInt(output, FIELD_ID_UPDATESEQ, this.updateSeq);
        }

        endFreeze(output, cookie);
    }

    // 从给定字节流中解包, 并将解包得到的数据覆盖到当前对象上。
    @Override
    public void defreeze(ByteStream input) throws DefreezeException {
        clear();

        int messageLen = beginDefreeze(input);
        int lastPos = input.read_pos();
        while (messageLen > 0) {
            int[] tuple = readTag(input);
            int tagType = tuple[0];
            int fieldId = tuple[1];

            boolean consumed = false;
            switch (fieldId) {
            case FIELD_ID_FILENAME:
                if (tagType == TAG_TYPE_LEN_PREFIXED) {
                    this.fileName = readFieldString(input);
                    addField(FIELD_ID_FILENAME);
                    consumed = true;
                }
                break;

            case FIELD_ID_CONTENTTYPE:
                if (tagType == TAG_TYPE_LEN_PREFIXED) {
                    this.contentType = readFieldString(input);
                    addField(FIELD_ID_CONTENTTYPE);
                    consumed = true;
                }
                break;

            case FIELD_ID_UPDATESEQ:
                if (tagType == TAG_TYPE_VARINT32) {
                    this.updateSeq = readFieldInt(input);
                    addField(FIELD_ID_UPDATESEQ);
                    consumed = true;
                }
                break;
            }

            if (!consumed) {
                // unknown field, ignore it
                discardBytes(input, tagType);
            }

            final int currentPos = input.read_pos();
            messageLen -= (currentPos - lastPos);
            lastPos = currentPos;
        }

        endDefreeze(input);
    }

    // 将当前消息打包成JSON树, 返回JSON树的指针
    @Override
    public JsonNode freezeToJSON() throws FreezeException {
        JsonNode thisNode = JsonNode.createJsonObject();

        if (hasField(FIELD_ID_FILENAME) && this.fileName != null) {
            JsonNode val_c_fileName = new JsonNode(this.fileName);
            thisNode.put("fileName", val_c_fileName);
        }

        if (hasField(FIELD_ID_CONTENTTYPE) && this.contentType != null) {
            JsonNode val_c_contentType = new JsonNode(this.contentType);
            thisNode.put("contentType", val_c_contentType);
        }

        if (hasField(FIELD_ID_UPDATESEQ)) {
            JsonNode val_c_updateSeq = new JsonNode(this.updateSeq);
            thisNode.put("updateSeq", val_c_updateSeq);
        }
        return thisNode;
    }

    // 从给定JSON树中解包, 并将解包得到的数据覆盖到当前消息上。
    @Override
    public void defreezeFromJSON(JsonNode inputJsonNode) throws DefreezeException {
        if (!inputJsonNode.isObject()) {
            throw new DefreezeException("input json is not object");
        }
        clear();

        JsonNode val_c_fileName = inputJsonNode.get("fileName");
        if (val_c_fileName != null && !val_c_fileName.isNull()) {
            this.fileName = val_c_fileName.asString();
            addField(FIELD_ID_FILENAME);
        }

        JsonNode val_c_contentType = inputJsonNode.get("contentType");
        if (val_c_contentType != null && !val_c_contentType.isNull()) {
            this.contentType = val_c_contentType.asString();
            addField(FIELD_ID_CONTENTTYPE);
        }

        JsonNode val_c_updateSeq = inputJsonNode.get("updateSeq");
        if (val_c_updateSeq != null && !val_c_updateSeq.isNull()) {
            this.updateSeq = (int)val_c_updateSeq.asInt64();
            addField(FIELD_ID_UPDATESEQ);
        }
    }
}

